#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
	void rec(int i, int j, string s, size_t wd_size)
	{
		if (i > 0 && wd_size + 2 <= s.size()) {
			string word(s, i - 1, wd_size + 2);
			if (word[0] == word[wd_size + 2 - 1]) {
				rec(i - 1, j + 1, s, wd_size + 2);
			}
		} else {
			string word(s, i, wd_size);
			if (word[0] == word[wd_size - 1]) {
				data.push_back(word);
			}
		}
	}
	string longestPalindrome(string s) {
		if (s.size() < 2)
			return s;
		for (size_t i = 0; s.size() >= 2 && i <= s.size() - 2; i++)
		{
			string word2(s, i, 2);
			if (word2[0] == word2[1]) {
				rec(i, i, s, 2);
				data.push_back(word2);
			}
		}
		for (size_t i = 0; s.size() >= 3 && i <= s.size() - 3; i++)
		{
			string word3(s, i, 3);
			if (word3[0] == word3[2]) {
				rec(i, i, s, 3);
				data.push_back(word3);
			}
		}
		if (data.size() == 0)
			return string(s, 0, 1);
		sort(data.begin(), data.end(), [](string& a, string& b){
			return a.size() > b.size();
		});
		return data[0];
	}
private:
	vector<string> data;
};

int main()
{
	Solution s;
	string res = s.longestPalindrome("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
	cout << res << endl;
}